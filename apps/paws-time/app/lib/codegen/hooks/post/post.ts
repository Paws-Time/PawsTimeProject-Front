/**
 * Generated by orval v7.3.0 🍺
 * Do not edit manually.
 * BASIC PAWSTIME API
 * OpenAPI spec version: v1
 */
import {
  useInfiniteQuery,
  useMutation,
  useQuery
} from '@tanstack/react-query'
import type {
  MutationFunction,
  QueryFunction,
  QueryKey,
  UseInfiniteQueryOptions,
  UseInfiniteQueryResult,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query'
import axios from 'axios'
import type {
  AxiosError,
  AxiosRequestConfig,
  AxiosResponse
} from 'axios'
import type {
  CreatePostReqDto,
  GetDetailPost200,
  GetPosts200,
  GetPostsParams,
  UpdatePostReqDto
} from '../../dtos'



/**
 * 게시글id로 상세조회를 할 수 있습니다.
 * @summary 게시글 상세 조회
 */
export const getDetailPost = (
    postId: number, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<GetDetailPost200>> => {
    
    return axios.get(
      `/post/posts/${postId}`,options
    );
  }


export const getGetDetailPostQueryKey = (postId: number,) => {
    return [`/post/posts/${postId}`] as const;
    }

    
export const getGetDetailPostInfiniteQueryOptions = <TData = Awaited<ReturnType<typeof getDetailPost>>, TError = AxiosError<unknown>>(postId: number, options?: { query?:UseInfiniteQueryOptions<Awaited<ReturnType<typeof getDetailPost>>, TError, TData>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetDetailPostQueryKey(postId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getDetailPost>>> = ({ signal }) => getDetailPost(postId, { signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, enabled: !!(postId), ...queryOptions} as UseInfiniteQueryOptions<Awaited<ReturnType<typeof getDetailPost>>, TError, TData> & { queryKey: QueryKey }
}

export type GetDetailPostInfiniteQueryResult = NonNullable<Awaited<ReturnType<typeof getDetailPost>>>
export type GetDetailPostInfiniteQueryError = AxiosError<unknown>


/**
 * @summary 게시글 상세 조회
 */

export function useGetDetailPostInfinite<TData = Awaited<ReturnType<typeof getDetailPost>>, TError = AxiosError<unknown>>(
 postId: number, options?: { query?:UseInfiniteQueryOptions<Awaited<ReturnType<typeof getDetailPost>>, TError, TData>, axios?: AxiosRequestConfig}

  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getGetDetailPostInfiniteQueryOptions(postId,options)

  const query = useInfiniteQuery(queryOptions) as  UseInfiniteQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getGetDetailPostQueryOptions = <TData = Awaited<ReturnType<typeof getDetailPost>>, TError = AxiosError<unknown>>(postId: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getDetailPost>>, TError, TData>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetDetailPostQueryKey(postId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getDetailPost>>> = ({ signal }) => getDetailPost(postId, { signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, enabled: !!(postId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getDetailPost>>, TError, TData> & { queryKey: QueryKey }
}

export type GetDetailPostQueryResult = NonNullable<Awaited<ReturnType<typeof getDetailPost>>>
export type GetDetailPostQueryError = AxiosError<unknown>


/**
 * @summary 게시글 상세 조회
 */

export function useGetDetailPost<TData = Awaited<ReturnType<typeof getDetailPost>>, TError = AxiosError<unknown>>(
 postId: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getDetailPost>>, TError, TData>, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getGetDetailPostQueryOptions(postId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * 게시글을 수정할 수 있습니다.
 * @summary 게시글 수정
 */
export const updatePost = (
    postId: number,
    updatePostReqDto: UpdatePostReqDto, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<string>> => {
    
    return axios.put(
      `/post/posts/${postId}`,
      updatePostReqDto,options
    );
  }



export const getUpdatePostMutationOptions = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof updatePost>>, TError,{postId: number;data: UpdatePostReqDto}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof updatePost>>, TError,{postId: number;data: UpdatePostReqDto}, TContext> => {
const {mutation: mutationOptions, axios: axiosOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof updatePost>>, {postId: number;data: UpdatePostReqDto}> = (props) => {
          const {postId,data} = props ?? {};

          return  updatePost(postId,data,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type UpdatePostMutationResult = NonNullable<Awaited<ReturnType<typeof updatePost>>>
    export type UpdatePostMutationBody = UpdatePostReqDto
    export type UpdatePostMutationError = AxiosError<unknown>

    /**
 * @summary 게시글 수정
 */
export const useUpdatePost = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof updatePost>>, TError,{postId: number;data: UpdatePostReqDto}, TContext>, axios?: AxiosRequestConfig}
): UseMutationResult<
        Awaited<ReturnType<typeof updatePost>>,
        TError,
        {postId: number;data: UpdatePostReqDto},
        TContext
      > => {

      const mutationOptions = getUpdatePostMutationOptions(options);

      return useMutation(mutationOptions);
    }
    /**
 * 게시글을 삭제할 수 있습니다.
 * @summary 게시글 삭제
 */
export const deletePost = (
    postId: number, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<string>> => {
    
    return axios.delete(
      `/post/posts/${postId}`,options
    );
  }



export const getDeletePostMutationOptions = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deletePost>>, TError,{postId: number}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof deletePost>>, TError,{postId: number}, TContext> => {
const {mutation: mutationOptions, axios: axiosOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deletePost>>, {postId: number}> = (props) => {
          const {postId} = props ?? {};

          return  deletePost(postId,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeletePostMutationResult = NonNullable<Awaited<ReturnType<typeof deletePost>>>
    
    export type DeletePostMutationError = AxiosError<unknown>

    /**
 * @summary 게시글 삭제
 */
export const useDeletePost = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deletePost>>, TError,{postId: number}, TContext>, axios?: AxiosRequestConfig}
): UseMutationResult<
        Awaited<ReturnType<typeof deletePost>>,
        TError,
        {postId: number},
        TContext
      > => {

      const mutationOptions = getDeletePostMutationOptions(options);

      return useMutation(mutationOptions);
    }
    /**
 * 게시글 목록 조회를 할 수 있습니다.
 * @summary 게시글 목록 조회
 */
export const getPosts = (
    params?: GetPostsParams, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<GetPosts200>> => {
    
    return axios.get(
      `/post/posts`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }


export const getGetPostsQueryKey = (params?: GetPostsParams,) => {
    return [`/post/posts`, ...(params ? [params]: [])] as const;
    }

    
export const getGetPostsInfiniteQueryOptions = <TData = Awaited<ReturnType<typeof getPosts>>, TError = AxiosError<unknown>>(params?: GetPostsParams, options?: { query?:UseInfiniteQueryOptions<Awaited<ReturnType<typeof getPosts>>, TError, TData>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetPostsQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getPosts>>> = ({ signal }) => getPosts(params, { signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseInfiniteQueryOptions<Awaited<ReturnType<typeof getPosts>>, TError, TData> & { queryKey: QueryKey }
}

export type GetPostsInfiniteQueryResult = NonNullable<Awaited<ReturnType<typeof getPosts>>>
export type GetPostsInfiniteQueryError = AxiosError<unknown>


/**
 * @summary 게시글 목록 조회
 */

export function useGetPostsInfinite<TData = Awaited<ReturnType<typeof getPosts>>, TError = AxiosError<unknown>>(
 params?: GetPostsParams, options?: { query?:UseInfiniteQueryOptions<Awaited<ReturnType<typeof getPosts>>, TError, TData>, axios?: AxiosRequestConfig}

  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getGetPostsInfiniteQueryOptions(params,options)

  const query = useInfiniteQuery(queryOptions) as  UseInfiniteQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getGetPostsQueryOptions = <TData = Awaited<ReturnType<typeof getPosts>>, TError = AxiosError<unknown>>(params?: GetPostsParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getPosts>>, TError, TData>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetPostsQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getPosts>>> = ({ signal }) => getPosts(params, { signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getPosts>>, TError, TData> & { queryKey: QueryKey }
}

export type GetPostsQueryResult = NonNullable<Awaited<ReturnType<typeof getPosts>>>
export type GetPostsQueryError = AxiosError<unknown>


/**
 * @summary 게시글 목록 조회
 */

export function useGetPosts<TData = Awaited<ReturnType<typeof getPosts>>, TError = AxiosError<unknown>>(
 params?: GetPostsParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getPosts>>, TError, TData>, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getGetPostsQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * 새로운 게시글을 생성할 수 있습니다.
 * @summary 게시글 생성
 */
export const createPost = (
    createPostReqDto: CreatePostReqDto, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<string>> => {
    
    return axios.post(
      `/post/posts`,
      createPostReqDto,options
    );
  }



export const getCreatePostMutationOptions = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof createPost>>, TError,{data: CreatePostReqDto}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof createPost>>, TError,{data: CreatePostReqDto}, TContext> => {
const {mutation: mutationOptions, axios: axiosOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof createPost>>, {data: CreatePostReqDto}> = (props) => {
          const {data} = props ?? {};

          return  createPost(data,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type CreatePostMutationResult = NonNullable<Awaited<ReturnType<typeof createPost>>>
    export type CreatePostMutationBody = CreatePostReqDto
    export type CreatePostMutationError = AxiosError<unknown>

    /**
 * @summary 게시글 생성
 */
export const useCreatePost = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof createPost>>, TError,{data: CreatePostReqDto}, TContext>, axios?: AxiosRequestConfig}
): UseMutationResult<
        Awaited<ReturnType<typeof createPost>>,
        TError,
        {data: CreatePostReqDto},
        TContext
      > => {

      const mutationOptions = getCreatePostMutationOptions(options);

      return useMutation(mutationOptions);
    }
    