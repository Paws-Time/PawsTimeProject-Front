/**
 * Generated by orval v7.3.0 üç∫
 * Do not edit manually.
 * BASIC PAWSTIME API
 * OpenAPI spec version: v1
 */
import { useInfiniteQuery, useMutation, useQuery } from "@tanstack/react-query";
import type {
  MutationFunction,
  QueryFunction,
  QueryKey,
  UseInfiniteQueryOptions,
  UseInfiniteQueryResult,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
} from "@tanstack/react-query";
import type {
  ApiResponseGetUserRespDto,
  ApiResponseString,
  ApiResponseVoid,
  LoginUserReqDto,
  UserCreateReqDto,
} from "../../dtos";
import { customInstance } from "../../../axios-client/customClient";
import type { ErrorType, BodyType } from "../../../axios-client/customClient";

type SecondParameter<T extends (...args: any) => any> = Parameters<T>[1];

/**
 * @summary ÌöåÏõê Í∞ÄÏûÖ
 */
export const createUser = (
  userCreateReqDto: BodyType<UserCreateReqDto>,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<ApiResponseVoid>(
    {
      url: `/users`,
      method: "POST",
      headers: { "Content-Type": "application/json" },
      data: userCreateReqDto,
      signal,
    },
    options,
  );
};

export const getCreateUserMutationOptions = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof createUser>>,
    TError,
    { data: BodyType<UserCreateReqDto> },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof createUser>>,
  TError,
  { data: BodyType<UserCreateReqDto> },
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof createUser>>,
    { data: BodyType<UserCreateReqDto> }
  > = (props) => {
    const { data } = props ?? {};

    return createUser(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type CreateUserMutationResult = NonNullable<
  Awaited<ReturnType<typeof createUser>>
>;
export type CreateUserMutationBody = BodyType<UserCreateReqDto>;
export type CreateUserMutationError = ErrorType<unknown>;

/**
 * @summary ÌöåÏõê Í∞ÄÏûÖ
 */
export const useCreateUser = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof createUser>>,
    TError,
    { data: BodyType<UserCreateReqDto> },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationResult<
  Awaited<ReturnType<typeof createUser>>,
  TError,
  { data: BodyType<UserCreateReqDto> },
  TContext
> => {
  const mutationOptions = getCreateUserMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * @summary Î°úÍ∑∏ÏïÑÏõÉ
 */
export const logoutUser = (
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<ApiResponseVoid>(
    { url: `/users/logout`, method: "POST", signal },
    options,
  );
};

export const getLogoutUserMutationOptions = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof logoutUser>>,
    TError,
    void,
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof logoutUser>>,
  TError,
  void,
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof logoutUser>>,
    void
  > = () => {
    return logoutUser(requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type LogoutUserMutationResult = NonNullable<
  Awaited<ReturnType<typeof logoutUser>>
>;

export type LogoutUserMutationError = ErrorType<unknown>;

/**
 * @summary Î°úÍ∑∏ÏïÑÏõÉ
 */
export const useLogoutUser = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof logoutUser>>,
    TError,
    void,
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationResult<
  Awaited<ReturnType<typeof logoutUser>>,
  TError,
  void,
  TContext
> => {
  const mutationOptions = getLogoutUserMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * @summary Î°úÍ∑∏Ïù∏
 */
export const loginUser = (
  loginUserReqDto: BodyType<LoginUserReqDto>,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<ApiResponseString>(
    {
      url: `/users/login`,
      method: "POST",
      headers: { "Content-Type": "application/json" },
      data: loginUserReqDto,
      signal,
    },
    options,
  );
};

export const getLoginUserMutationOptions = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof loginUser>>,
    TError,
    { data: BodyType<LoginUserReqDto> },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof loginUser>>,
  TError,
  { data: BodyType<LoginUserReqDto> },
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof loginUser>>,
    { data: BodyType<LoginUserReqDto> }
  > = (props) => {
    const { data } = props ?? {};

    return loginUser(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type LoginUserMutationResult = NonNullable<
  Awaited<ReturnType<typeof loginUser>>
>;
export type LoginUserMutationBody = BodyType<LoginUserReqDto>;
export type LoginUserMutationError = ErrorType<unknown>;

/**
 * @summary Î°úÍ∑∏Ïù∏
 */
export const useLoginUser = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof loginUser>>,
    TError,
    { data: BodyType<LoginUserReqDto> },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationResult<
  Awaited<ReturnType<typeof loginUser>>,
  TError,
  { data: BodyType<LoginUserReqDto> },
  TContext
> => {
  const mutationOptions = getLoginUserMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * @summary userIdÎ•º ÌÜµÌï¥ Ïú†Ï†Ä Ï†ïÎ≥¥ Ï°∞Ìöå
 */
export const getUserFromUserId = (
  userId: number,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<ApiResponseGetUserRespDto>(
    { url: `/users/${userId}`, method: "GET", signal },
    options,
  );
};

export const getGetUserFromUserIdQueryKey = (userId: number) => {
  return [`/users/${userId}`] as const;
};

export const getGetUserFromUserIdInfiniteQueryOptions = <
  TData = Awaited<ReturnType<typeof getUserFromUserId>>,
  TError = ErrorType<unknown>,
>(
  userId: number,
  options?: {
    query?: UseInfiniteQueryOptions<
      Awaited<ReturnType<typeof getUserFromUserId>>,
      TError,
      TData
    >;
    request?: SecondParameter<typeof customInstance>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetUserFromUserIdQueryKey(userId);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getUserFromUserId>>
  > = ({ signal }) => getUserFromUserId(userId, requestOptions, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!userId,
    ...queryOptions,
  } as UseInfiniteQueryOptions<
    Awaited<ReturnType<typeof getUserFromUserId>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetUserFromUserIdInfiniteQueryResult = NonNullable<
  Awaited<ReturnType<typeof getUserFromUserId>>
>;
export type GetUserFromUserIdInfiniteQueryError = ErrorType<unknown>;

/**
 * @summary userIdÎ•º ÌÜµÌï¥ Ïú†Ï†Ä Ï†ïÎ≥¥ Ï°∞Ìöå
 */

export function useGetUserFromUserIdInfinite<
  TData = Awaited<ReturnType<typeof getUserFromUserId>>,
  TError = ErrorType<unknown>,
>(
  userId: number,
  options?: {
    query?: UseInfiniteQueryOptions<
      Awaited<ReturnType<typeof getUserFromUserId>>,
      TError,
      TData
    >;
    request?: SecondParameter<typeof customInstance>;
  },
): UseInfiniteQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getGetUserFromUserIdInfiniteQueryOptions(
    userId,
    options,
  );

  const query = useInfiniteQuery(queryOptions) as UseInfiniteQueryResult<
    TData,
    TError
  > & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const getGetUserFromUserIdQueryOptions = <
  TData = Awaited<ReturnType<typeof getUserFromUserId>>,
  TError = ErrorType<unknown>,
>(
  userId: number,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getUserFromUserId>>,
      TError,
      TData
    >;
    request?: SecondParameter<typeof customInstance>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetUserFromUserIdQueryKey(userId);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getUserFromUserId>>
  > = ({ signal }) => getUserFromUserId(userId, requestOptions, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!userId,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getUserFromUserId>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetUserFromUserIdQueryResult = NonNullable<
  Awaited<ReturnType<typeof getUserFromUserId>>
>;
export type GetUserFromUserIdQueryError = ErrorType<unknown>;

/**
 * @summary userIdÎ•º ÌÜµÌï¥ Ïú†Ï†Ä Ï†ïÎ≥¥ Ï°∞Ìöå
 */

export function useGetUserFromUserId<
  TData = Awaited<ReturnType<typeof getUserFromUserId>>,
  TError = ErrorType<unknown>,
>(
  userId: number,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getUserFromUserId>>,
      TError,
      TData
    >;
    request?: SecondParameter<typeof customInstance>;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getGetUserFromUserIdQueryOptions(userId, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}
