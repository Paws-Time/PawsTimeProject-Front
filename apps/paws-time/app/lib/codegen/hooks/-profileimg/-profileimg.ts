/**
 * Generated by orval v7.3.0 🍺
 * Do not edit manually.
 * BASIC PAWSTIME API
 * OpenAPI spec version: v1
 */
import { useInfiniteQuery, useMutation, useQuery } from "@tanstack/react-query";
import type {
  MutationFunction,
  QueryFunction,
  QueryKey,
  UseInfiniteQueryOptions,
  UseInfiniteQueryResult,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
} from "@tanstack/react-query";
import type {
  ApiResponseGetProfileImgRespDto,
  ApiResponseVoid,
  UpdateProfileImgBody,
} from "../../dtos";
import { customInstance } from "../../../axios-client/customClient";
import type { ErrorType, BodyType } from "../../../axios-client/customClient";

type SecondParameter<T extends (...args: any) => any> = Parameters<T>[1];

/**
 * 프로필 이미지를 조회합니다.
 * @summary 프로필 이미지 조회
 */
export const getProfileImg = (
  userId: number,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<ApiResponseGetProfileImgRespDto>(
    { url: `/profileImg/${userId}`, method: "GET", signal },
    options,
  );
};

export const getGetProfileImgQueryKey = (userId: number) => {
  return [`/profileImg/${userId}`] as const;
};

export const getGetProfileImgInfiniteQueryOptions = <
  TData = Awaited<ReturnType<typeof getProfileImg>>,
  TError = ErrorType<unknown>,
>(
  userId: number,
  options?: {
    query?: UseInfiniteQueryOptions<
      Awaited<ReturnType<typeof getProfileImg>>,
      TError,
      TData
    >;
    request?: SecondParameter<typeof customInstance>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetProfileImgQueryKey(userId);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getProfileImg>>> = ({
    signal,
  }) => getProfileImg(userId, requestOptions, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!userId,
    ...queryOptions,
  } as UseInfiniteQueryOptions<
    Awaited<ReturnType<typeof getProfileImg>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetProfileImgInfiniteQueryResult = NonNullable<
  Awaited<ReturnType<typeof getProfileImg>>
>;
export type GetProfileImgInfiniteQueryError = ErrorType<unknown>;

/**
 * @summary 프로필 이미지 조회
 */

export function useGetProfileImgInfinite<
  TData = Awaited<ReturnType<typeof getProfileImg>>,
  TError = ErrorType<unknown>,
>(
  userId: number,
  options?: {
    query?: UseInfiniteQueryOptions<
      Awaited<ReturnType<typeof getProfileImg>>,
      TError,
      TData
    >;
    request?: SecondParameter<typeof customInstance>;
  },
): UseInfiniteQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getGetProfileImgInfiniteQueryOptions(userId, options);

  const query = useInfiniteQuery(queryOptions) as UseInfiniteQueryResult<
    TData,
    TError
  > & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const getGetProfileImgQueryOptions = <
  TData = Awaited<ReturnType<typeof getProfileImg>>,
  TError = ErrorType<unknown>,
>(
  userId: number,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getProfileImg>>,
      TError,
      TData
    >;
    request?: SecondParameter<typeof customInstance>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetProfileImgQueryKey(userId);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getProfileImg>>> = ({
    signal,
  }) => getProfileImg(userId, requestOptions, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!userId,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getProfileImg>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetProfileImgQueryResult = NonNullable<
  Awaited<ReturnType<typeof getProfileImg>>
>;
export type GetProfileImgQueryError = ErrorType<unknown>;

/**
 * @summary 프로필 이미지 조회
 */

export function useGetProfileImg<
  TData = Awaited<ReturnType<typeof getProfileImg>>,
  TError = ErrorType<unknown>,
>(
  userId: number,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getProfileImg>>,
      TError,
      TData
    >;
    request?: SecondParameter<typeof customInstance>;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getGetProfileImgQueryOptions(userId, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * 프로필 이미지를 변경할 수 있습니다.
 * @summary 프로필 이미지 변경
 */
export const updateProfileImg = (
  userId: number,
  updateProfileImgBody: BodyType<UpdateProfileImgBody>,
  options?: SecondParameter<typeof customInstance>,
) => {
  const formData = new FormData();
  formData.append("file", updateProfileImgBody.file);

  return customInstance<ApiResponseVoid>(
    {
      url: `/profileImg/${userId}`,
      method: "PUT",
      headers: { "Content-Type": "multipart/form-data" },
      data: formData,
    },
    options,
  );
};

export const getUpdateProfileImgMutationOptions = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof updateProfileImg>>,
    TError,
    { userId: number; data: BodyType<UpdateProfileImgBody> },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof updateProfileImg>>,
  TError,
  { userId: number; data: BodyType<UpdateProfileImgBody> },
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof updateProfileImg>>,
    { userId: number; data: BodyType<UpdateProfileImgBody> }
  > = (props) => {
    const { userId, data } = props ?? {};

    return updateProfileImg(userId, data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type UpdateProfileImgMutationResult = NonNullable<
  Awaited<ReturnType<typeof updateProfileImg>>
>;
export type UpdateProfileImgMutationBody = BodyType<UpdateProfileImgBody>;
export type UpdateProfileImgMutationError = ErrorType<unknown>;

/**
 * @summary 프로필 이미지 변경
 */
export const useUpdateProfileImg = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof updateProfileImg>>,
    TError,
    { userId: number; data: BodyType<UpdateProfileImgBody> },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationResult<
  Awaited<ReturnType<typeof updateProfileImg>>,
  TError,
  { userId: number; data: BodyType<UpdateProfileImgBody> },
  TContext
> => {
  const mutationOptions = getUpdateProfileImgMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * 프로필 이미지를 삭제합니다.
 * @summary 프로필 이미지 삭제
 */
export const deleteProfileImg = (
  userId: number,
  options?: SecondParameter<typeof customInstance>,
) => {
  return customInstance<ApiResponseVoid>(
    { url: `/profileImg/${userId}`, method: "DELETE" },
    options,
  );
};

export const getDeleteProfileImgMutationOptions = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteProfileImg>>,
    TError,
    { userId: number },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof deleteProfileImg>>,
  TError,
  { userId: number },
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof deleteProfileImg>>,
    { userId: number }
  > = (props) => {
    const { userId } = props ?? {};

    return deleteProfileImg(userId, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type DeleteProfileImgMutationResult = NonNullable<
  Awaited<ReturnType<typeof deleteProfileImg>>
>;

export type DeleteProfileImgMutationError = ErrorType<unknown>;

/**
 * @summary 프로필 이미지 삭제
 */
export const useDeleteProfileImg = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteProfileImg>>,
    TError,
    { userId: number },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationResult<
  Awaited<ReturnType<typeof deleteProfileImg>>,
  TError,
  { userId: number },
  TContext
> => {
  const mutationOptions = getDeleteProfileImgMutationOptions(options);

  return useMutation(mutationOptions);
};
