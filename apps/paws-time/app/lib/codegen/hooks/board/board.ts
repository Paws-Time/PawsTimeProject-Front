/**
 * Generated by orval v7.3.0 🍺
 * Do not edit manually.
 * BASIC PAWSTIME API
 * OpenAPI spec version: v1
 */
import {
  useInfiniteQuery,
  useMutation,
  useQuery
} from '@tanstack/react-query'
import type {
  MutationFunction,
  QueryFunction,
  QueryKey,
  UseInfiniteQueryOptions,
  UseInfiniteQueryResult,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query'
import axios from 'axios'
import type {
  AxiosError,
  AxiosRequestConfig,
  AxiosResponse
} from 'axios'
import type {
  ApiResponseGetBoardRespDto,
  ApiResponseListGetBoardRespDto,
  ApiResponseVoid,
  CreateBoardReqDto,
  GetBoardListParams,
  UpdateBoardReqDto
} from '../../dtos'



/**
 * board_id를 입력하면 title, description을 조회할 수 있습니다.
 * @summary 게시판 상세 조회
 */
export const getBoard = (
    boardId: number, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<ApiResponseGetBoardRespDto>> => {
    
    return axios.get(
      `/board/${boardId}`,options
    );
  }


export const getGetBoardQueryKey = (boardId: number,) => {
    return [`/board/${boardId}`] as const;
    }

    
export const getGetBoardInfiniteQueryOptions = <TData = Awaited<ReturnType<typeof getBoard>>, TError = AxiosError<unknown>>(boardId: number, options?: { query?:UseInfiniteQueryOptions<Awaited<ReturnType<typeof getBoard>>, TError, TData>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetBoardQueryKey(boardId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getBoard>>> = ({ signal }) => getBoard(boardId, { signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, enabled: !!(boardId), ...queryOptions} as UseInfiniteQueryOptions<Awaited<ReturnType<typeof getBoard>>, TError, TData> & { queryKey: QueryKey }
}

export type GetBoardInfiniteQueryResult = NonNullable<Awaited<ReturnType<typeof getBoard>>>
export type GetBoardInfiniteQueryError = AxiosError<unknown>


/**
 * @summary 게시판 상세 조회
 */

export function useGetBoardInfinite<TData = Awaited<ReturnType<typeof getBoard>>, TError = AxiosError<unknown>>(
 boardId: number, options?: { query?:UseInfiniteQueryOptions<Awaited<ReturnType<typeof getBoard>>, TError, TData>, axios?: AxiosRequestConfig}

  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getGetBoardInfiniteQueryOptions(boardId,options)

  const query = useInfiniteQuery(queryOptions) as  UseInfiniteQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getGetBoardQueryOptions = <TData = Awaited<ReturnType<typeof getBoard>>, TError = AxiosError<unknown>>(boardId: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getBoard>>, TError, TData>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetBoardQueryKey(boardId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getBoard>>> = ({ signal }) => getBoard(boardId, { signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, enabled: !!(boardId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getBoard>>, TError, TData> & { queryKey: QueryKey }
}

export type GetBoardQueryResult = NonNullable<Awaited<ReturnType<typeof getBoard>>>
export type GetBoardQueryError = AxiosError<unknown>


/**
 * @summary 게시판 상세 조회
 */

export function useGetBoard<TData = Awaited<ReturnType<typeof getBoard>>, TError = AxiosError<unknown>>(
 boardId: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getBoard>>, TError, TData>, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getGetBoardQueryOptions(boardId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * 선택한 게시판의 제목, 설명을 수정할 수 있습니다.
 * @summary 게시판 수정
 */
export const updateBoard = (
    boardId: number,
    updateBoardReqDto: UpdateBoardReqDto, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<ApiResponseVoid>> => {
    
    return axios.put(
      `/board/${boardId}`,
      updateBoardReqDto,options
    );
  }



export const getUpdateBoardMutationOptions = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof updateBoard>>, TError,{boardId: number;data: UpdateBoardReqDto}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof updateBoard>>, TError,{boardId: number;data: UpdateBoardReqDto}, TContext> => {
const {mutation: mutationOptions, axios: axiosOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof updateBoard>>, {boardId: number;data: UpdateBoardReqDto}> = (props) => {
          const {boardId,data} = props ?? {};

          return  updateBoard(boardId,data,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type UpdateBoardMutationResult = NonNullable<Awaited<ReturnType<typeof updateBoard>>>
    export type UpdateBoardMutationBody = UpdateBoardReqDto
    export type UpdateBoardMutationError = AxiosError<unknown>

    /**
 * @summary 게시판 수정
 */
export const useUpdateBoard = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof updateBoard>>, TError,{boardId: number;data: UpdateBoardReqDto}, TContext>, axios?: AxiosRequestConfig}
): UseMutationResult<
        Awaited<ReturnType<typeof updateBoard>>,
        TError,
        {boardId: number;data: UpdateBoardReqDto},
        TContext
      > => {

      const mutationOptions = getUpdateBoardMutationOptions(options);

      return useMutation(mutationOptions);
    }
    /**
 * 선택한 게시판을 삭제합니다.
 * @summary 게시판 삭제
 */
export const deleteBoard = (
    boardId: number, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<ApiResponseVoid>> => {
    
    return axios.put(
      `/board/delete/${boardId}`,undefined,options
    );
  }



export const getDeleteBoardMutationOptions = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteBoard>>, TError,{boardId: number}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof deleteBoard>>, TError,{boardId: number}, TContext> => {
const {mutation: mutationOptions, axios: axiosOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteBoard>>, {boardId: number}> = (props) => {
          const {boardId} = props ?? {};

          return  deleteBoard(boardId,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteBoardMutationResult = NonNullable<Awaited<ReturnType<typeof deleteBoard>>>
    
    export type DeleteBoardMutationError = AxiosError<unknown>

    /**
 * @summary 게시판 삭제
 */
export const useDeleteBoard = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteBoard>>, TError,{boardId: number}, TContext>, axios?: AxiosRequestConfig}
): UseMutationResult<
        Awaited<ReturnType<typeof deleteBoard>>,
        TError,
        {boardId: number},
        TContext
      > => {

      const mutationOptions = getDeleteBoardMutationOptions(options);

      return useMutation(mutationOptions);
    }
    /**
 * 새로운 게시판을 생성할 수 있습니다.
 * @summary 게시판 생성
 */
export const createBoard = (
    createBoardReqDto: CreateBoardReqDto, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<ApiResponseVoid>> => {
    
    return axios.post(
      `/board/boards`,
      createBoardReqDto,options
    );
  }



export const getCreateBoardMutationOptions = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof createBoard>>, TError,{data: CreateBoardReqDto}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof createBoard>>, TError,{data: CreateBoardReqDto}, TContext> => {
const {mutation: mutationOptions, axios: axiosOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof createBoard>>, {data: CreateBoardReqDto}> = (props) => {
          const {data} = props ?? {};

          return  createBoard(data,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type CreateBoardMutationResult = NonNullable<Awaited<ReturnType<typeof createBoard>>>
    export type CreateBoardMutationBody = CreateBoardReqDto
    export type CreateBoardMutationError = AxiosError<unknown>

    /**
 * @summary 게시판 생성
 */
export const useCreateBoard = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof createBoard>>, TError,{data: CreateBoardReqDto}, TContext>, axios?: AxiosRequestConfig}
): UseMutationResult<
        Awaited<ReturnType<typeof createBoard>>,
        TError,
        {data: CreateBoardReqDto},
        TContext
      > => {

      const mutationOptions = getCreateBoardMutationOptions(options);

      return useMutation(mutationOptions);
    }
    /**
 * 생성되어있는 모든 게시판을 조회합니다.
 * @summary 게시판 목록 조회
 */
export const getBoardList = (
    params?: GetBoardListParams, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<ApiResponseListGetBoardRespDto>> => {
    
    return axios.get(
      `/board/list`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }


export const getGetBoardListQueryKey = (params?: GetBoardListParams,) => {
    return [`/board/list`, ...(params ? [params]: [])] as const;
    }

    
export const getGetBoardListInfiniteQueryOptions = <TData = Awaited<ReturnType<typeof getBoardList>>, TError = AxiosError<unknown>>(params?: GetBoardListParams, options?: { query?:UseInfiniteQueryOptions<Awaited<ReturnType<typeof getBoardList>>, TError, TData>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetBoardListQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getBoardList>>> = ({ signal }) => getBoardList(params, { signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseInfiniteQueryOptions<Awaited<ReturnType<typeof getBoardList>>, TError, TData> & { queryKey: QueryKey }
}

export type GetBoardListInfiniteQueryResult = NonNullable<Awaited<ReturnType<typeof getBoardList>>>
export type GetBoardListInfiniteQueryError = AxiosError<unknown>


/**
 * @summary 게시판 목록 조회
 */

export function useGetBoardListInfinite<TData = Awaited<ReturnType<typeof getBoardList>>, TError = AxiosError<unknown>>(
 params?: GetBoardListParams, options?: { query?:UseInfiniteQueryOptions<Awaited<ReturnType<typeof getBoardList>>, TError, TData>, axios?: AxiosRequestConfig}

  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getGetBoardListInfiniteQueryOptions(params,options)

  const query = useInfiniteQuery(queryOptions) as  UseInfiniteQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getGetBoardListQueryOptions = <TData = Awaited<ReturnType<typeof getBoardList>>, TError = AxiosError<unknown>>(params?: GetBoardListParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getBoardList>>, TError, TData>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetBoardListQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getBoardList>>> = ({ signal }) => getBoardList(params, { signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getBoardList>>, TError, TData> & { queryKey: QueryKey }
}

export type GetBoardListQueryResult = NonNullable<Awaited<ReturnType<typeof getBoardList>>>
export type GetBoardListQueryError = AxiosError<unknown>


/**
 * @summary 게시판 목록 조회
 */

export function useGetBoardList<TData = Awaited<ReturnType<typeof getBoardList>>, TError = AxiosError<unknown>>(
 params?: GetBoardListParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getBoardList>>, TError, TData>, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getGetBoardListQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



