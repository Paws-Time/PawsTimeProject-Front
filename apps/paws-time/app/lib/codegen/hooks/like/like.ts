/**
 * Generated by orval v7.3.0 🍺
 * Do not edit manually.
 * BASIC PAWSTIME API
 * OpenAPI spec version: v1
 */
import { useMutation } from "@tanstack/react-query";
import type {
  MutationFunction,
  UseMutationOptions,
  UseMutationResult,
} from "@tanstack/react-query";
import type { ApiResponseInteger } from "../../dtos";
import { customInstance } from "../../../axios-client/customClient";
import type { ErrorType } from "../../../axios-client/customClient";

type SecondParameter<T extends (...args: any) => any> = Parameters<T>[1];

/**
 * 좋아요를 누르거나 취소할 수 있습니다.
 * @summary 좋아요
 */
export const toggleLike = (
  postId: number,
  options?: SecondParameter<typeof customInstance>,
) => {
  return customInstance<ApiResponseInteger>(
    { url: `/likes/${postId}`, method: "PUT" },
    options,
  );
};

export const getToggleLikeMutationOptions = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof toggleLike>>,
    TError,
    { postId: number },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof toggleLike>>,
  TError,
  { postId: number },
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof toggleLike>>,
    { postId: number }
  > = (props) => {
    const { postId } = props ?? {};

    return toggleLike(postId, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type ToggleLikeMutationResult = NonNullable<
  Awaited<ReturnType<typeof toggleLike>>
>;

export type ToggleLikeMutationError = ErrorType<unknown>;

/**
 * @summary 좋아요
 */
export const useToggleLike = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof toggleLike>>,
    TError,
    { postId: number },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationResult<
  Awaited<ReturnType<typeof toggleLike>>,
  TError,
  { postId: number },
  TContext
> => {
  const mutationOptions = getToggleLikeMutationOptions(options);

  return useMutation(mutationOptions);
};
