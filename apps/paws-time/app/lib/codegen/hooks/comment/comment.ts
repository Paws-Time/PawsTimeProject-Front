/**
 * Generated by orval v7.3.0 üç∫
 * Do not edit manually.
 * BASIC PAWSTIME API
 * OpenAPI spec version: v1
 */
import { useMutation } from "@tanstack/react-query";
import type {
  MutationFunction,
  UseMutationOptions,
  UseMutationResult,
} from "@tanstack/react-query";
import type { ApiResponseVoid, CreateCommentReqDto } from "../../dtos";
import { customInstance } from "../../../axios-client/customClient";
import type { ErrorType, BodyType } from "../../../axios-client/customClient";

type SecondParameter<T extends (...args: any) => any> = Parameters<T>[1];

/**
 * ÎåìÍ∏Ä ÏÉùÏÑ± Í∏∞Îä•
 * @summary ÎåìÍ∏Ä ÏÉùÏÑ±
 */
export const createComment = (
  postId: number,
  createCommentReqDto: BodyType<CreateCommentReqDto>,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<ApiResponseVoid>(
    {
      url: `/${postId}/comments`,
      method: "POST",
      headers: { "Content-Type": "application/json" },
      data: createCommentReqDto,
      signal,
    },
    options,
  );
};

export const getCreateCommentMutationOptions = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof createComment>>,
    TError,
    { postId: number; data: BodyType<CreateCommentReqDto> },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof createComment>>,
  TError,
  { postId: number; data: BodyType<CreateCommentReqDto> },
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof createComment>>,
    { postId: number; data: BodyType<CreateCommentReqDto> }
  > = (props) => {
    const { postId, data } = props ?? {};

    return createComment(postId, data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type CreateCommentMutationResult = NonNullable<
  Awaited<ReturnType<typeof createComment>>
>;
export type CreateCommentMutationBody = BodyType<CreateCommentReqDto>;
export type CreateCommentMutationError = ErrorType<unknown>;

/**
 * @summary ÎåìÍ∏Ä ÏÉùÏÑ±
 */
export const useCreateComment = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof createComment>>,
    TError,
    { postId: number; data: BodyType<CreateCommentReqDto> },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationResult<
  Awaited<ReturnType<typeof createComment>>,
  TError,
  { postId: number; data: BodyType<CreateCommentReqDto> },
  TContext
> => {
  const mutationOptions = getCreateCommentMutationOptions(options);

  return useMutation(mutationOptions);
};
